import groovy.json.JsonSlurper

plugins {
    id 'com.enonic.xp.app' version '1.0.17'
    id "com.moowork.node" version "1.1.1"
}

app {
    name = project.appName
    displayName = 'React Starter Kit'
    vendorName = 'Enonic AS'
    vendorUrl = 'http://enonic.com'
    systemVersion = "${xpVersion}"
}

node {
    download = true
    version = '6.9.2'
}


dependencies {
    include "com.enonic.xp:lib-repo:${xpVersion}"
    include "com.enonic.xp:lib-node:${xpVersion}"
    compile "com.enonic.xp:core-api:${xpVersion}"
    compile "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"
    include "com.enonic.xp:lib-mustache:${xpVersion}"
    include "com.enonic.xp:lib-thymeleaf:${xpVersion}"

    include "com.enonic.lib:lib-router:1.0.1"

    // REACT4XP RUNTIME:
    include 'com.enonic.lib:lib_react4xp_runtime:0.0.1-SNAPSHOT'


}

repositories {
    mavenLocal()
    jcenter()
    xp.enonicRepo()
    maven {
        url 'http://repo.enonic.com/public'
    }
}



npmInstall.inputs.file("package.json")
npmInstall.inputs.file("package-lock.json")
npmInstall.outputs.dir("node_modules")


// ------ Not react4xp-specific, but integrated in the react4xp build flow, by making the task dependent on config_react4xp. The task config is
// also adjusted during config_react4xp, with updated args and outputs depending on the build config constants.
//
// Transpile .js and .es6 files under src/main/resources.
// These are "pure XP" source code files, not JS (and react) assets. Those must be transpiled separately, by the webpackReact4xp task below.
// This is currently done by reserving .es6 and .js files below src/main/resources/ for this task,
// while reserving .JSX files under that, and all relevant extensions in other locations, for the webpackReact4xp task.
task babelXP(type: NodeTask) {
    script = file('node_modules/babel-cli/bin/babel.js')
    args = ["src/main/resources", "--out-dir", "build/resources/main", "--ignore", "**/*.jsx"]      // Ignoring JSX in the XP structure is important

    inputs.dir 'src/main/resources'
    outputs.dir("build/resources/main")
}
babelXP.dependsOn += 'config_react4xp'
babelXP.dependsOn += 'processResources'




// --------------------------------------------------- REACT4XP-SPECIFIC:

def ROOT = new File(".").absolutePath

// Necessary placeholder, will be filled during build
def REACT4XP_CONFIG = {}

// node_modules/react4xp-buildconstants will generate this config file that defines the whole React4xp project.
// This particular file will be used during build. However react4xp-buildconstants will also make a copy of it
// in the predicted folder of the react4xp lib, according to its own constants.
def REACT4XP_CONFIG_FILE = "build/react4xp_constants.json"

// Override config values to taste:
def REACT4XP_OVERRIDES = '{' +
        '"outputFileName": "' + ROOT + "/" + REACT4XP_CONFIG_FILE + '",' +

        '"overwriteConstantsFile":true, ' +
        '"verbose": true' +
    '}'



task config_react4xp(type: NodeTask) {
    script = file('node_modules/react4xp-buildconstants/cli.js')
    args = [
            ROOT,
            REACT4XP_OVERRIDES
    ]

    // After the script has run and created the config JSON file, update the configuration of the next tasks, using the constructed values from the config file:
    doLast {
        // Read the file content into an object
        def configFile = new File(REACT4XP_CONFIG_FILE)
        REACT4XP_CONFIG = new JsonSlurper().parseText(configFile.text)

        // Update the configuration of the next tasks, using the constructed values from the config file:
        tasks['babelXP'].configure {
            args = ["src/main/resources", "--out-dir", REACT4XP_CONFIG.BUILD_MAIN, "--ignore", "**/*.jsx"]  // Still ignoring JSX in the XP structure
            outputs.dir(REACT4XP_CONFIG.BUILD_MAIN)
        }
        tasks['webpack_react4xp'].configure {
            inputs.dir(REACT4XP_CONFIG.SRC_SITE)        // <-- Only needed for react4xp-build-components, but this is a big one during development since it surveils the entire XP structure. To streamline the build, separate react4xp-build-components out to its own task, and only use this line in that task.
            inputs.dir(REACT4XP_CONFIG.SRC_R4X)
            outputs.dir(REACT4XP_CONFIG.BUILD_R4X)
        }
    }
}
config_react4xp.dependsOn += 'npmInstall'


task webpack_react4xp(type: NodeTask) {
    script = file('node_modules/webpack/bin/webpack.js')
    args = [
        '--config', 'node_modules/react4xp-build-components/webpack.config.js',
        '--config', 'node_modules/react4xp-runtime-client/webpack.config.js',
        '--config', 'node_modules/react4xp-runtime-nashornpolyfills/webpack.config.js',
        '--config', 'node_modules/react4xp-runtime-externals/webpack.config.js',
        '--env.REACT4XP_CONFIG_FILE=' + ROOT + '/' + REACT4XP_CONFIG_FILE,
        '--progress', '--color'
    ]

    inputs.file(REACT4XP_CONFIG_FILE)
    inputs.file("package.json")
    inputs.file("package-lock.json")
}
webpack_react4xp.dependsOn += 'config_react4xp'

// ------------------------------------------------------  ...END OF REACT4XP-SPECIFIC.




jar.dependsOn += 'webpack_react4xp'
jar.dependsOn += 'babelXP'

jar.outputs.dir('build/libs')
